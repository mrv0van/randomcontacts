//
//  ContactsCreator.m
//  ContactsCreator
//
//  Created by Vladimir Ozerov on 23/08/2018.
//  Copyright ¬© 2018 SberTech. All rights reserved.
//

#import "ContactsCreator.h"
@import Contacts;
@import UIKit;


#define NOT_SET ((id)[NSNull null])


static const NSUInteger CatAvatarCount = 44;


typedef NSArray<NSString *> MetaContact;
typedef NS_ENUM(NSUInteger, MetaContactIndex) {
	MetaContactIndexGivenName   = 0,
	MetaContactIndexFamilyName  = 1,
	MetaContactIndexEmailMain   = 2,
	MetaContactIndexEmailSecond = 3,
	MetaContactIndexPhoneMain   = 4,
	MetaContactIndexPhoneSecond = 5,
	MetaContactIndexAvatar      = 6,
};


#define CLogLn(FORMAT, ...) fprintf(stderr, "\n%s", [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);
#define CLog(FORMAT, ...) fprintf(stderr, "%s", [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);


@interface ContactsCreator ()

@property (nonatomic, strong) CNContactStore *contactStore;
@property (nonatomic, assign) NSUInteger contactsCount;

@end


@implementation ContactsCreator

- (instancetype)init
{
	self = [super init];
	if (self)
	{
		_contactStore = [CNContactStore new];
	}
	return self;
}


#pragma mark - Actions

- (void)executeWithCount:(NSUInteger)contactsCount
{
	self.contactsCount = contactsCount;
	
	CNAuthorizationStatus status = [CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts];
	switch (status)
	{
		case CNAuthorizationStatusNotDetermined:
		{
			[self.contactStore requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted, NSError * _Nullable error) {
				if (!granted)
				{
					CLogLn(@"üõë\tCNContactStore access required.");
					exit(1);
				}
				[self performChanges];
			}];
			break;
		}
		case CNAuthorizationStatusRestricted:
		case CNAuthorizationStatusDenied:
		{
			CLogLn(@"‚ö†Ô∏è\tChange CNContactStore permission in settings.");
			[[UIApplication sharedApplication] openURL:[NSURL URLWithString:UIApplicationOpenSettingsURLString]
											   options:@{}
									 completionHandler:nil];
			break;
		}
		case CNAuthorizationStatusAuthorized:
		{
			[self performChanges];
			break;
		}
	}
}


#pragma mark - Routine

- (void)performChanges
{
	dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0), ^{
		[self deleteAllContacts];
		[self createCustomContacts];
		[self createRandomContacts];
		CLogLn(@"‚úÖ\tAll Done.");
		
		dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
			exit(0);
		});
	});
}

- (void)deleteAllContacts
{
	CLogLn(@"\tDeleting contacts...");
	NSMutableArray<CNContact *> *contactList = [NSMutableArray array];
	CNContactFetchRequest *fetchRequest = [[CNContactFetchRequest alloc] initWithKeysToFetch:@[]];
	[self.contactStore enumerateContactsWithFetchRequest:fetchRequest
												   error:nil
											  usingBlock:^(CNContact *contact, BOOL *stop) {
												  [contactList addObject:contact];
											  }];
	
	CNSaveRequest *saveRequest = [CNSaveRequest new];
	for (CNContact *contact in contactList)
	{
		[saveRequest deleteContact:[contact mutableCopy]];
	}
	[self performSaveRequest:saveRequest];
	CLog(@" done.");
}

- (void)createCustomContacts
{
	CLogLn(@"\tCreating custom contacts...");
	
	NSArray<MetaContact *> *metaContactList = @[
		// FIRST_NAME    LAST_NAME           EMAIL_1                   EMAIL_2             PHONE_1                PHONE_2                AVATAR
		// –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
		@[ @"–í–ª–∞–¥–∏–º–∏—Ä",  @"–û–∑–µ—Ä–æ–≤",          @"ozermanious@test.com",  @"mrv0van@test.ru", @"+7 (916) 345-88-94", @"+7 (917) 844-07-30", @"Kianu"           ],
		@[ @"–ê–Ω—Ç–æ–Ω",     @"–°–µ—Ä–µ–±—Ä—è–∫–æ–≤",      @"serebryakov@test.com",  NOT_SET,            @"+7 (916) 378-46-87", @"+7 (904) 753-93-83", @"Crazyman.jpg"    ],
		@[ @"–ú–∞–∫—Å–∏–º",    @"–†—ã–∂–æ–≤",           @"rijov.maxim@test.com",  NOT_SET,            @"+7 (967) 241-83-66", @"+7 (999) 800-70-68", @"Boss.jpg"        ],
		@[ @"–°–µ—Ä–≥–µ–π",    @"–ú–∞—Ä—á—É–∫–æ–≤",        @"marchukov@test.com",    NOT_SET,            @"+7 (999) 800-19-91", NOT_SET,               @"Developer.jpg"   ],
		@[ @"–ê–ª–µ–∫—Å–µ–π",   @"–õ–µ–≤–∞–Ω–æ–≤",         @"levanov@test.com",      NOT_SET,            @"+7 (915) 077-97-49", NOT_SET,               @"Flash.jpg"       ],
		@[ @"–î–º–∏—Ç—Ä–∏–π",   @"–°–∞–∫–∞–ª",           @"sakalthebest@test.com", NOT_SET,            @"+7 (903) 230-94-61", NOT_SET,               @"Snowboard.jpg"   ],
		// –°–≤–µ—Ä—Ö–ª—é–¥–∏
		@[ @"–ß–∞–∫",       @"–ù–æ—Ä—Ä–∏—Å",          @"ch@ck.norris",          NOT_SET,            @"+7 (999) 999-99-99", NOT_SET,               @"ChackNorris.jpg" ],
		@[ @"–ì–µ—Ä–º–∞–Ω",    @"–ì—Ä–µ—Ñ",            @"gref@gmail.com",        NOT_SET,            @"+7 (900) 000-00-00", NOT_SET,               @"Gref.jpg"        ],
		// –ü—Ä–æ—Å—Ç—ã–µ
		@[ @"–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", NOT_SET,            @"mrprezident@russia.ru", NOT_SET,            @"+7 (911) 111-11-11", NOT_SET,               NOT_SET            ],
		@[ NOT_SET,      @"–ü—Ä–µ–º—å–µ—Ä-–º–∏–Ω–∏—Å—Ç—Ä", @"mrministr@russia.ru",   NOT_SET,            @"+7 (922) 222-22-22", NOT_SET,               NOT_SET            ],
		// –ú—É—Ç–Ω—ã–µ
		@[ @"%2%&^*",    @"2(&@#2",          @"hoho@mail.ru",          NOT_SET,            @"+7 (943) 412-23-54", NOT_SET,               NOT_SET            ],
		@[ @" $#@1 ",    @" ^@123 ",         @"haha@gmail.com",        NOT_SET,            @"+7 (935) 365-68-24", NOT_SET,               NOT_SET            ],
		// –î—É–±–ª–∏–∫–∞—Ç—ã
		@[ @"–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç", NOT_SET,            @"mrprezident@russia.ru", NOT_SET,            @"+7 (911) 111-11-11", NOT_SET,               NOT_SET            ],
		@[ @"President", NOT_SET,            @"mrprezident@russia.ru", NOT_SET,            @"+7 (911) 111-11-11", NOT_SET,               NOT_SET            ],
		@[ NOT_SET,      @"–ü—Ä–µ–º—å–µ—Ä-–º–∏–Ω–∏—Å—Ç—Ä", @"mrministr@russia.ru",   NOT_SET,            @"+7 (922) 222-22-22", NOT_SET,               NOT_SET            ],
	];

	[self addMetaContacts:metaContactList];
	CLog(@" done.");
}

- (void)createRandomContacts
{
	CLogLn(@"\tCreating %@ random contacts", @(self.contactsCount));
	const NSUInteger saveRequestSize = self.contactsCount / 30;
	const NSArray<NSString *> *givenNamesCollection = @[
		@"–ó–∞–Ω–¥–µ—Ä–ª–æ–≥",	@"–ö–∏—Ä—Å–∞–Ω",		@"–ê–ª—Ç—É–¥–µ–≥",		@"–ë–æ—Ä–¥–µ—Ö",		@"–©–¥—É—ã—Ä—É–∫",		// 1
		@"–ê–π—Ñ–æ–∑–∞–≤—Ä",	@"–ö—Ä–∞–±—Ö–∞–∑",		@"–ö—Ç—É–ª—Ö—É",		@"–ü–∞—Ä–æ—Ñ–µ–Ω",		@"–£–ª—å—Ä–∏—Ö",		// 2
		@"–ò–±—É–ø—Ä–æ—Ñ–µ–Ω",	@"–ú–∏—Ç—Ä–∞–Ω–¥–æ–∫–ª",	@"–¶—É—Ü—Ö–µ–π—á—É–≥",	@"–´–∫—É—Ü—Ñ—ã–≥",		@"–•—ä—ç–¥—è–∫—Ü—ã—Ñ",	// 3
		@"–õ–µ–≥–æ–ª–∞—Å",		@"–ë–∞—Ä–º–∞–ª–µ–π",	@"–ß—É–ø–∞–∫–∞–±—Ä–∞",	@"–î–∂–æ–Ω",		@"–§—Ä–∏–¥—Ä–∏—Ö",		// 4
		@"–ê–ª–∏",			@"–ö–æ—Ä–≤–∏–Ω",		@"–ë–∞–±–∞–π",		@"–ô–æ–∑–µ—Ñ",		@"–ì—ç–Ω–¥–∞–ª—å—Ñ",	// 5
		@"–§—Ä–æ–¥–æ",		@"–°—ç–º–º–∏—É–º",		@"–ü–µ—Ä–∏–≥—Ä–∏–Ω",	@"–ú–µ—Ä—Ä–∏",		@"–ê—Ä–∞–≥–æ—Ä–Ω",		// 6
		@"–ë–æ—Ä–æ–º–∏—Ä",		@"–§–∞—Ä–∞–º–∏—Ä",		@"–õ–µ–≥–æ–ª–∞—Å",		@"–¢–µ–æ–¥–µ–Ω",		@"–°–∞—Ä—É–º–∞–Ω",		// 7
		@"–°–∞—É—Ä–æ–Ω",		@"–ì–æ—Ä–ª—É–º",		@"–°–º–µ–∞–≥–æ—Ä–ª",	@"–ü—Ä–æ—Ç–æ—Å",		@"–õ—é–∫",			// 8
		@"–ú–∏—Ç—Ä–∞–Ω–¥–∏—Ä",	@"–ö–æ–ª–æ–±–æ–∫",		@"–ì–µ–Ω–∞",		@"–ì–∏–º–ª–∏",		@"–î–∞—Ä–∏–Ω",		// 9
		@"–ë–∞–ª–∏–Ω",		@"–î–≤–∞–ª–∏–Ω",		@"–ë–∏–ª—å–±–æ",		@"–ú–µ—Ä–ª–∏–Ω",		@"–ú–∞–∫—Å–∏–º–∏–ª—å—è–Ω",	// 10
		@"–ù–∏–∫–æ–ª–∞–π",		@"–ë–∞—Ç—É—Ç",		@"–û–±–∏-–í–∞–Ω",		@"–ô–æ–¥–∞",		@"–ö–≤–∞–π-–ì–æ–Ω",	// 11
		@"–≠–Ω–∞–∫–∏–Ω",		@"–•–∞–Ω",			@"–ß—É–±–∞–∫–∫–∞",		@"–ú–µ–π—Å",		@"–ë–æ–±–∞",		// 12
		@"–î–∂–∞–±–±–∞",		@"–≠–ª–æ–Ω",		@"–ë—Ä—é—Å",		@"–ê—Ä–Ω–æ–ª—å–¥",		@"–ö–∞–ø–∏—Ç–∞–Ω",		// 13
		@"–ì–µ–Ω–µ—Ä–∞–ª",		@"–°–ø–∞–Ω—á–±–æ–±",	@"–ú–∏—Å—Ç–µ—Ä",		@"–ö–ª–∞—Ä–∫",		@"–°–∞–º—ã–π",		// 14
		@"–ö–æ—Ç",         @"–û–º–ª–µ—Ç",       @"–ö–æ—Ç–æ—Ñ–µ–π",     @"–®–∞–π—Ç–∞–Ω",      @"–®—Ç–∏—Ä–ª–∏—Ü",     // 15
		NOT_SET
	];
	const NSArray<NSString *> *familyNamesCollection = @[
		@"–û–±–∞–º–∞",		@"–ò–≤–∞–Ω–æ–≤",		@"–ü–µ—Ç—Ä–æ–≤",		@"–°–∏–¥–æ—Ä–æ–≤",		@"–ó–∞–±—É–≥–æ—Ä–¥–µ–Ω–∫–æ",		// 1
		@"–ì–ª—É–ø—ã–π",		@"–ö–∞—Ç–∞–ø—É–ª—å—Ç–æ–≤",	@"–†—è–∂–µ–Ω–∫–∞",		@"–ü–æ—Ç—Ç–µ—Ä",		@"–ì—Ä–æ–∑–Ω—ã–π",				// 2
		@"–ú–∏–ª—ã–π",		@"–ì—Ä—É—Å—Ç–Ω—ã–π",	@"–í–µ—Å–µ–ª—ã–π",		@"–ü—Ä–∏–∫–æ–ª—å–Ω—ã–π",	@"–ö–≤–∞–∑–∏–º–æ–¥–∞",			// 3
		@"–ë–æ–≥–∞—Ç—ã–π",		@"–ë–µ–¥–Ω—ã–π",		@"–ö–æ—Å—Ç—Ä–æ–≤",		@"–¶—ã–≥–∞–Ω",		@"–¶–∞—Ä—å",				// 4
		@"–≠–º–±–µ—Ä—Å–∫–∏–π",	@"–°–µ—Ä—ã–π",		@"–°–∫–∞–π—É–æ–∫–µ—Ä",	@"–í–µ–π–¥–µ—Ä",		@"–¢–µ—Å–ª–∞",				// 5
		@"–¶—É–∫–µ—Ä–±–µ—Ä–≥",	@"–ë–µ–≥—É—â–∏–π",		@"–¢—Ä—É—Å–ª–∏–≤—ã–π",	@"–û—Ç–≤–∞–∂–Ω—ã–π",	@"–ë–µ–∑–Ω–∞–¥–µ–∂–Ω—ã–π",			// 6
		@"–î–∂–æ–±—Å",		@"–¢—å—é—Ä–∏–Ω–≥",		@"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å",	@"–ü–æ—à–µ–ª-–µ—Å—Ç—å",	@"–ë–æ–ª—å–Ω–æ–π",				// 7
		@"–ë—ã–¥–ª–æ–∫–æ–¥–µ—Ä",	@"–°–∫—É—á–Ω—ã–π",		@"–ó–∞–Ω—É–¥–∞",		@"–î–≤—É–ª–∏—á–Ω—ã–π",	@"–ó–∞–±–µ—Ä–∏-–º–µ–Ω—è-–¥–æ–º–æ–π",	// 8
		@"–ö—Ä–∏–ø—Ç–æ–Ω–∏—Ç",	@"–ê–º–∏–¥–∞–ª–∞",		@"–°–∏–¥–∏—É—Å",		@"–û—Ä–≥–∞–Ω–∞",		@"–°–æ–ª–æ",				// 9
		@"–§–µ—Ç—Ç",		@"–•–∞—Ç—Ç",		@"–ü–æ–¥–≥–æ—Ä–Ω—ã–π",	@"–ú–∞—Å–∫",		@"–ë–µ–∑—É–º–Ω—ã–π",			// 10
		@"–ö–æ–Ω–Ω–æ—Ä",		@"–í–∞–Ω–¥–∞–º",		@"–õ–∏",			@"–ß–∞–Ω",			@"–®–≤–∞—Ä—Ü–µ–Ω–µ–≥–≥–µ—Ä",		// 11
		@"–û—á–µ–≤–∏–¥–Ω–æ—Å—Ç—å",	@"–ß–º–æ",			@"–¢–∞–π—Å–æ–Ω",		@"–®–∞–π—Ç–∞–Ω",		@"–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π",			// 12
		@"–ö—Ä–∞–±—Å",		@"–ö–µ–Ω—Ç",		@"–ë–æ–Ω–¥",		@"–ì–∞–ª—É—Å—Ç—è–Ω",	@"–ß–ª–µ–Ω—Å",				// 13
		@"–°–ª–æ—É–ø–æ—É–∫",	@"–ö—Ä–∏–≤–æ—Ä—É–∫–∏–π",	@"–ì–∞—Ä–≥–∞–Ω—Ç—é–∞",	@"–ö–æ–Ω—Ç–∏–Ω—É—É–º",	@"–°–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å",		// 14
		@"–≠–∫—Å–ø—Ä–µ—Å—Å",    @"–°–≤—è—Ç–æ–π",      @"–ü–µ—Ä–≤—ã–π",      @"–í—Ç–æ—Ä–æ–π",      @"–¢—Ä–µ—Ç–∏–π",              // 15
		NOT_SET
	];
	
	NSMutableArray<MetaContact *> *metaContactList = [NSMutableArray array];
	
	NSString * (^randomPhone)(NSString *) = ^(NSString *baseString) {
		NSMutableString *phoneString = [baseString mutableCopy];
		for (NSInteger charIndex = 0; charIndex < 7; charIndex += 1)
		{
			[phoneString appendString:@(rand() % 10).stringValue];
		}
		return phoneString;
	};

	for (NSUInteger contactIndex = 0; contactIndex < self.contactsCount; contactIndex++)
	{
		NSMutableArray<NSString *> *metaContact = [NSMutableArray array];
		
		NSUInteger givenNameRandomIndex = rand() % givenNamesCollection.count;
		NSString *givenName = givenNamesCollection[givenNameRandomIndex];
		[metaContact addObject:givenName];

		NSUInteger familyNameRandomIndex = rand() % familyNamesCollection.count;
		NSString *familyName = familyNamesCollection[familyNameRandomIndex];
		[metaContact addObject:familyName];

		NSString *mainEmail = [@[
			familyName != NOT_SET ? familyName : @"nofamily",
			@"@",
			givenName != NOT_SET ? givenName : @"noname",
			@".ru"
		] componentsJoinedByString:@""].lowercaseString;
		[metaContact addObject:mainEmail];
		NSString *secondEmail = NOT_SET;
		if (rand() % 3)
		{
			secondEmail = [@[
				givenName != NOT_SET ? givenName : @"noname",
				@".",
				familyName != NOT_SET ? familyName : @"nofamily",
				@"@test.ru"
			] componentsJoinedByString:@""].lowercaseString;
		}
		[metaContact addObject:secondEmail];

		[metaContact addObject:randomPhone(@"+7900")];
		NSString *secondPhone = NOT_SET;
		if (rand() % 2)
		{
			secondPhone = randomPhone(@"+7901");
		}
		[metaContact addObject:secondPhone];

		NSString *avatarString = NOT_SET;
		if (rand() % 3 < 2)
		{
			avatarString = @(rand() % CatAvatarCount).stringValue;
		}
		[metaContact addObject:avatarString];

		[metaContactList addObject:[metaContact copy]];
		
		if (metaContactList.count >= saveRequestSize)
		{
			[self addMetaContacts:metaContactList];
			[metaContactList removeAllObjects];
			CLog(@".");
		}
	}
	
	if (metaContactList.count)
	{
		[self addMetaContacts:metaContactList];
	}
	CLog(@" done.");
}

- (CNMutableContact *)contactWithMetaContact:(MetaContact *)metaContact
{
	CNMutableContact *contact = [CNMutableContact new];
	
	NSString *givenName = metaContact[MetaContactIndexGivenName];
	if (givenName != NOT_SET)
	{
		contact.givenName = givenName;
	}

	NSString *familyName = metaContact[MetaContactIndexFamilyName];
	if (familyName != NOT_SET)
	{
		contact.familyName = familyName;
	}
	
	NSMutableArray<CNLabeledValue<NSString *> *> *emailAddresses = [NSMutableArray array];
	NSString *mainEmail = metaContact[MetaContactIndexEmailMain];
	if (mainEmail != NOT_SET)
	{
		[emailAddresses addObject:[CNLabeledValue labeledValueWithLabel:nil
																  value:mainEmail]];
	}
	NSString *secondEmail = metaContact[MetaContactIndexEmailSecond];
	if (secondEmail != NOT_SET)
	{
		[emailAddresses addObject:[CNLabeledValue labeledValueWithLabel:nil
																  value:secondEmail]];
	}
	if (emailAddresses.count)
	{
		contact.emailAddresses = [emailAddresses copy];
	}

	NSMutableArray<CNLabeledValue<NSString *> *> *phoneNumbers = [NSMutableArray array];
	NSString *mainPhone = metaContact[MetaContactIndexPhoneMain];
	if (mainPhone != NOT_SET)
	{
		CNPhoneNumber *phoneNumber = [CNPhoneNumber phoneNumberWithStringValue:mainPhone];
		[phoneNumbers addObject:[CNLabeledValue labeledValueWithLabel:nil
																value:phoneNumber]];
	}
	NSString *secondPhone = metaContact[MetaContactIndexPhoneSecond];
	if (secondPhone != NOT_SET)
	{
		CNPhoneNumber *phoneNumber = [CNPhoneNumber phoneNumberWithStringValue:secondPhone];
		[phoneNumbers addObject:[CNLabeledValue labeledValueWithLabel:nil
																value:phoneNumber]];
	}
	if (phoneNumbers.count)
	{
		contact.phoneNumbers = [phoneNumbers copy];
	}
	
	NSString *avatarName = metaContact[MetaContactIndexAvatar];
	if (avatarName != NOT_SET)
	{
		UIImage *image = [UIImage imageNamed:avatarName];
		NSData *imageData = UIImagePNGRepresentation(image);
		NSAssert(imageData != nil, @"Image not found: %@", avatarName);
		contact.imageData = imageData;
	}

	return contact;
}

- (void)addMetaContacts:(NSArray<MetaContact *> *)metaContactList
{
	CNSaveRequest *saveRequest = [CNSaveRequest new];
	for (MetaContact *metaContact in metaContactList)
	{
		CNMutableContact *contact = [self contactWithMetaContact:metaContact];
		[saveRequest addContact:contact toContainerWithIdentifier:nil];
	}
	[self performSaveRequest:saveRequest];
}

- (void)performSaveRequest:(CNSaveRequest *)saveRequest
{
	NSError *error = nil;
	[self.contactStore executeSaveRequest:saveRequest error:&error];
	if (error)
	{
		CLogLn(@"üõë\tFailed.\n%@", error);
		exit(1);
	}
}

@end
